inkscape:
    added-in-version: "1.0.15"
    tags: [image, pdf]
    class: SubprocessExtToFormatFilter
    help: Runs inkscape in batch mode.
    executable: inkscape
    format-specifier: ''
    ext-to-format:
        .eps: --export-eps
        .pdf: --export-pdf
        .png: --export-png
        .ps: --export-ps
    output: True
    command-string: '%(prog)s -z %(format)s="%(output_file)s" %(args)s "%(script_file)s"'

plantuml:
    added-in-version: "1.0.15"
    tags: [uml]
    class: SubprocessExtToFormatFilter
    help: Runs plantuml and generates an image file.
    executable: java
    input-extensions: [.uml, .plantuml]
    output-extensions: [.png, .svg]
    add-new-files: True
    make-dummy-output: True
    format-specifier: '-T'
    ext-to-format:
           .png: png
           .svg: svg
    jar: ["Path from project root to JAR file or absolute path to JAR file.", plantuml.jar]
    command-string: '%(prog)s -jar "%(jar)s" %(format)s %(args)s "%(script_file)s"'
    output: True

perl:
    added-in-version: "1.0.15"
    tags: [perl, code]
    class: SubprocessStdoutFilter
    help: Runs perl interpreter.
    executable: perl
    input-extensions: [.pl, .txt]
    output-extensions: [.txt]

fopub:
    added-in-version: "1.0.13"
    class: SubprocessFilter
    help: Runs fopub on an xml generated by asciidoctor.
    executable: fopub
    tags: [pdf]
    input-extensions: ['.xml', '.fo']
    output-extensions: ['.pdf']
    command-string: '%(prog)s "%(script_file)s"'
    output: True

unoconv:
    added-in-version: "1.0.7"
    class: SubprocessExtToFormatFilter
    help: http://dag.wiee.rs/home-made/unoconv/
    tags: [image, office, pdf]
    executable: unoconv
    version-command: unoconv --version
    input-extensions: [.*] # TODO what are valid extensions?
    output-extensions: [.png, .pdf, .svg]
    format-specifier: '-f '
    ext-to-format:
           .png: png
           .pdf: pdf
           .svg: svg
    command-string: '%(prog)s %(format)s "%(script_file)s"'
    output: True

libreoffice:
    added-in-version: "1.0.7"
    class: SubprocessExtToFormatFilter
    help: Converts libreoffice files to other formats.
    tags: [image, pdf, office]
    input-extensions: [.*] # TODO what are valid extensions?
    output-extensions: [.png, .pdf, .svg]
    executable: libreoffice
    version-command: libreoffice --version
    format-specifier: '--convert-to '
    ext-to-format:
           .png: png
           .pdf: pdf
           .svg: svg
    command-string: '%(prog)s --headless %(format)s "%(script_file)s"'
    output: True

fdp:
    added-in-version: "1.0.7"
    class: SubprocessExtToFormatFilter
    help: Renders .dot files to either PNG or PDF images using fdp.
    tags: [dot, image, pdf]
    input-extensions: [.dot]
    output-extensions: [.png, .pdf]
    executable: fdp
    version-command: fdp -V
    format-specifier: '-T'
    ext-to-format:
           .png: png
           .pdf: pdf
    command-string: '%(prog)s %(format)s -o"%(output_file)s" "%(script_file)s"'
    output: True

sweave:
    added-in-version: "1.0.6"
    help: Runs Sweave, generating a .tex file.
    class: SubprocessFilter
    executable: "R"
    version-command: R --version
    command-string: "%(prog)s CMD Sweave %(args)s %(script_file)s"
    tags: [R, sweave, literate]
    input-extensions: [.Snw, .Rnw]
    output-extensions: [.tex]

clj|clojure:
    help: Runs clojure code, returning stdout.
    class: SubprocessStdoutFilter
    executable: clojure
    tags: [code, clojure]
    input-extensions: [.clj, .txt]
    output-extensions: [.txt]

pegdown:
    added-in-version: "1.0.1"
    class: SubprocessStdoutFilter
    executable: pegdown
    input-extensions: [.md, .txt]
    output-extensions: [.html]
    help: |
        Converts extended markdown to HTML using pegdown.

        Gist for how I configure the `pegdown` command:
        https://gist.github.com/ananelson/7782324

livescript:
    added-in-version: "1.0.1"
    class: SubprocessStdoutFilter
    help: Runs LiveScript (.ls) files.
    executable: lsc
    input-extensions: [.ls, .txt]
    output-extensions: [.txt]
    version-command: lsc -v
    command-string: "%(prog)s -p %(args)s %(script_file)s %(scriptargs)s"

elixir:
    added-in-version: "1.0.1"
    class: SubprocessStdoutFilter
    help: Runs Elixir (.ex) files.
    executable: elixir
    input-extensions: [.exs, .ex, .txt]
    output-extensions: [.txt]
    version-command: elixir -v
    command-string: "%(prog)s %(args)s %(script_file)s %(scriptargs)s"

make:
    added-in-version: "0.9.9.6"
    class: SubprocessStdoutFilter
    help: Runs make tasks.
    task: ["Default make task to run.", ""]
    executable: make
    input-extensions: ['.*']
    output-extensions: [.txt]
    version-command: make --version

fortran|f95:
    added-in-version: "0.9.9.6"
    class: SubprocessCompileFilter
    help: "Compiles and executes fortran code."
    input-extensions: [.f, .F, .FOR, .for, .f77, .f90, .f95, .f03, .fpp, .FPP]
    output-extensions: [.txt]
    executable: gfortran
    mkdir: include
    version-command: "gfortran --version"
    compiler-command-string: "%(prog)s %(compiler_args)s -o %(compiled_filename)s %(script_file)s"

go:
    added-in-version: "0.9.9.6"
    help: "Runs 'go run' command on an input .go file. http://golang.org/"
    examples: [go]
    class: SubprocessStdoutFilter
    executable: go
    command-string: "%(prog)s run %(args)s %(script_file)s"
    input-extensions: [.go, .txt]
    output-extensions: [.txt]

gotest:
    added-in-version: "0.9.9.6"
    help: "Runs 'go test' command on an input .go file. http://golang.org/"
    examples: [go]
    class: SubprocessStdoutFilter
    executable: go
    command-string: "%(prog)s test %(args)s %(script_file)s"
    input-extensions: [.go, .txt]
    output-extensions: [.txt]

ditaa:
    added-in-version: "0.9.9.6"
    examples: [ditaa]
    class: SubprocessFilter
    executable: ditaa
    help: Runs ditaa to generate images from ascii art.
    output: True
    input-extensions: [.txt]
    output-extensions: [.png]
    command-string: "%(prog)s  %(args)s %(script_file)s"

julia:
    added-in-version: "0.9.9.5"
    examples: [julia]
    class: SubprocessStdoutFilter
    executable: julia
    help: Runs julia (.jl) files.
    input-extensions: [.jl, .txt]
    output-extensions: [.txt]
    command-string: "%(prog)s -q --no-history --no-startup %(script_file)s %(scriptargs)s"
    version-command: "julia -v"

jlcon:
    added-in-version: "0.9.9.5"
    examples: [julia]
    class: PexpectReplFilter
    executable: "julia -q --no-history --no-startup"
    prompt: "julia>"
    initial-prompt: "julia>"
    help: Runs julia (.jl) files in the repl.
    input-extensions: [.jl, .txt]
    output-extensions: [.jlcon]
    version-command: "julia -v"
    send-line-ending: "\r\n"
    trim-prompt: "julia>"

vistrails:
    help: Executes vistrails (.vt) workflows and adds any generated files to the dexy run.
    nodoc: True
    class: SubprocessStdoutFilter
    tags: [workflow, repro]
    executable: vistrails
    input-extensions: ['.vt']
    output-extensions: ['.txt']
    command-string: "%(prog)s --nosplash --noninteractive --verbose=2 --noSingleInstance --dumpcells=foo --workflowgraph=foo --evolutiongraph=foo --pdf --executeworkflows %(script_file)s %(scriptargs)s"
    add-new-files: True

pdftotext|pdf2text:
    class: SubprocessFilter
    tags : [pdf]
    executable: pdftotext
    help: "Uses pdftotext from the poppler library to convert PDFs to text."
    input-extensions: ['.pdf']
    output-extensions: ['.txt']

tidy|htmltidy:
    examples: [tidy]
    class: SubprocessFilter
    command-string: '%(prog)s -quiet -output "%(output_file)s" "%(script_file)s"'
    tags : [html]
    executable: tidy
    help: "Uses tidy to clean and validate HTML."
    input-extensions: ['.html']
    output-extensions: ['.html']

tidyerrors:
    examples: [tidy]
    class: SubprocessStdoutFilter
    tags : [html]
    executable: tidy
    write-stderr-to-stdout: True
    check-return-code: False
    command-string: '%(prog)s -errors -quiet "%(script_file)s"'
    help: "Uses tidy to print HTML errors."
    input-extensions: ['.html']
    output-extensions: ['.txt']

epstopdf|eps2pdf:
    class: SubprocessFilter
    tags : [pdf]
    executable: epstopdf
    output: True
    command-string: '%(prog)s "%(script_file)s"'
    help: "Uses epstopdf to convert .eps files to .pdf"
    input-extensions: ['.eps']
    output-extensions: ['.pdf']

stata:
    class: SubprocessFilter
    tags : [stats, code]
    command-string: '%(prog)s -q -b do "%(script_file)s"' # TODO implement .smcl output (replace -b with -s)
    help: Runs stata files.
    executable: stata
    input-extensions: [.do, .txt]
    output-extensions: [.log]

statai:
    class: PexpectReplFilter
    tags : [stats, code, repl]
    help: Runs stata files.
    executable: "stata -q"
    input-extensions: [.do, .txt]
    output-extensions: [.log]
    initial-prompt: '.'
    prompts: ['.', '>']

scalai:
    class: PexpectReplFilter
    tags: [code, repl, scala]
    prompts : ['scala> ', '     | ']
    initial-prompt : "[^>]+scala>"
    help: Runs scala code in the REPL.
    executable: scala
    input-extensions: [.scala, .txt]
    output-extensions: [.txt]

rusti:
    class: PexpectReplFilter
    tags: [code, repl, rust]
    prompt : 'rusti>'
    initial-prompt : "[^>]+rusti>"
    help: Runs rust code in the rust repl (rusti). EXPERIMENTAL.
    executable: rusti
    input-extensions: [.rs, .txt]
    output-extensions: [.txt]

rust|rustc:
    class: SubprocessCompileFilter
    tags: [code, compiled, compiled]
    help: Runs rust code.
    compiled-extension: ''
    executable: rustc
    input-extensions: [.rs, .txt]
    output-extensions: [.txt]
    version-command: rustc -v

php:
    class: SubprocessStdoutFilter
    tags: [code, php]
    executable: php
    check-return-code: False
    version-command: php --version
    input-extensions: [.php, .txt]
    output-extensions: [.html, .txt]
    help: >
        Runs php file.

        Php code must be included in <?php ... ?> tags.

nodejs|node:
    class: SubprocessStdoutFilter
    tags: [code, js]
    help: Runs scripts using node js
    input-extensions: [.js, .txt]
    output-extensions: [.txt]
    executable: node
    version-command: node --version

lynxdump:
    class: SubprocessStdoutFilter
    tags: [text, html]
    help: Converts HTML to plain text by using lynx -dump.
    input-extensions: [.html]
    output-extensions: [.txt]
    version-command: lynx --version
    executable: lynx -dump

jruby:
    class: SubprocessStdoutFilter
    tags: [ruby, code]
    help: Run jruby code and return stdout.
    input-extensions: [.rb, .txt]
    output-extensions: [.txt]
    executable: jruby
    version-command: jruby --version

jirb:
    class: PexpectReplFilter
    tags: [ruby, code, repl]
    allow-match-prompt-without-newline : True
    check-return-code : False
    executable: jirb --prompt-mode simple
    help: Run jruby code in jirb.
    initial-timeout: 30
    input-extensions : [.rb, .txt]
    output-extensions : [.rbcon]
    prompts : ['>>' ,'?>']
    version-command : jirb --version

redcloth|textile:
    class: SubprocessStdoutFilter
    help: Converts textile to HTML using Redcloth.
    executable: redcloth
    tags: [text, markup]
    input-extensions: ['.txt', '.textile']
    output-extensions: ['.html']
    version-command: redcloth --version

redclothl|latextile:
    class: SubprocessStdoutFilter
    help: Converts textile to LaTeX using Redcloth.
    tags: [text, markup]
    executable: redcloth -o latex
    input-extensions: ['.txt', '.textile']
    output-extensions: ['.tex']
    version-command: 'redcloth --version'

rst2odt:
    class: SubprocessFilter
    tags: [text, markup]
    help: Runs rst2odt command (docutils).
    version-command: 'rst2pdf.py --version'
    executable: rst2odt.py
    input-extensions: ['.rst', '.txt']
    output-extensions: ['.odt']

xelatex|xetex:
    class: dexy.filters.latex:LatexFilter
    tags: [pdf, latex]
    help: Runs .tex files using xelatex.
    executable: xelatex

cowsay:
    class: SubprocessStdoutTextFilter
    tags: [asciiart]
    examples: ['cowsay']
    help: Runs input through 'cowsay'.
    executable: cowsay

cowthink:
    class: SubprocessStdoutTextFilter
    tags: [asciiart]
    help: Runs input through 'cowthink'.
    executable: cowthink

figlet:
    class: SubprocessStdoutTextFilter
    tags: [asciiart]
    help: Runs input through 'figlet'.
    examples: ['figlet']
    executable: figlet

pyin:
    class: SubprocessInputFilter
    tags: [code, input, python]
    help: Runs python code and passes input
    executable: python
    version-command: python --version

pdfinfo:
    class: SubprocessStdoutFilter
    tags: [pdf]
    help: Uses the pdfinfo script to retrieve metadata about a PDF.
    executable: pdfinfo
    input-extensions: [.pdf]
    output-extensions: [.txt]

pdfcrop:
    class: SubprocessFilter
    tags: [pdf]
    help: Runs the PDFcrop script http://pdfcrop.sourceforge.net/
    executable: pdfcrop
    input-extensions: [.pdf]
    output-extensions: [.pdf]

#  TODO: output oeb (outputs a directory)
#  TODO: output azw
#  TODO: test with html, pml plugins
calibre|ebook:
    class: SubprocessFilter
    output: True
    tags: [ebook]
    executable: ebook-convert
    command-string: '%(prog)s "%(script_file)s" "%(output_file)s" %(args)s'
    version-command: ebook-convert --version
    path-extensions: [/Applications/calibre.app/Contents/MacOS]
    input-extensions:
           - .html
           - .epub
           - .azw
           - .chm
           - .comic
           - .djvu
           - .pdf
           - .mobi
           - .lit
           - .fb2
    output-extensions:
           - .mobi
           - .epub
           - .fb2
           - .htmlz
           - .lit
           - .lrf
           - .pdf
           - .rtf
           - .snb
           - .tcr
           - .txt
           - .txtz
           - .html
           - .pml
    help: >
       Runs `ebook-convert` command (part of calibre)

       Generates various output formats (including .mobi for Kindle)
       http://manual.calibre-ebook.com/cli/ebook-convert.html

# TODO Support all these + test them.
#Output formats: native, json, html, html5, html+lhs, html5+lhs, s5, slidy,
#                dzslides, docbook, opendocument, latex, latex+lhs, beamer,
#                context, texinfo, man, markdown, markdown+lhs, plain, rst,
#                rst+lhs, mediawiki, textile, rtf, org, asciidoc, odt, docx,
#                epub
pandoc:
    class: SubprocessFilter
    output: True
    tags: [ebook, html]
    executable: pandoc
    command-string: '%(prog)s %(args)s "%(script_file)s" -o "%(output_file)s"'
    help: Convert documents to various available output formats using pandoc.
    version-command: pandoc --version
    output-extensions: ['.html', '.txt', '.tex', '.pdf', '.rtf', '.json', '.docx', '.odt', '.epub', '.md', '.markdown']

espeak:
    class: SubprocessFilter
    output: True
    executable: espeak
    tags: [text-to-speech]
    command-string: '%(prog)s %(args)s -w "%(output_file)s" "%(script_file)s"'
    input-extensions: [.txt]
    output-extensions: [.wav]
    help: Runs espeak text to speech.

rd2pdf|Rd2pdf:
    class: SubprocessFilter
    help: Generates a pdf from R documentation file.
    tags: [rstats, pdf]
    input-extensions: [.Rd]
    output-extensions: [.pdf, .dvi]
    executable: R CMD Rd2pdf
    version-command: R CMD Rd2pdf -v
    command-string: '%(prog)s %(args)s --output=%(output_file)s %(script_file)s'

rdconv:
    class: SubprocessExtToFormatFilter
    executable: R CMD Rdconv
    version-command: R CMD Rdconv -v
    tags: [rstats]
    help: Convert R documentation to other formats.
    input-extensions: [.Rd]
    output-extensions: ['.txt', '.html', '.tex', '.R']
    ext-to-format:
        .txt: txt
        .html: html
        .tex: latex
        .R: example
    format-specifier: '--type='
    command-string: '%(prog)s %(format)s %(args)s --output="%(output_file)s" "%(script_file)s"'

lyx:
    class: SubprocessExtToFormatFilter
    help: Runs lyx to generate LaTeX output.
    executable: lyx
    tags: [lyx, pdf, latex]
    version-command: lyx -version
    output-extensions: [.tex, .pdf, .lyx]
    ext-to-format:
        .tex: latex
    format-specifier: '-e '
    command-string: '%(prog)s %(format)s %(args)s "%(script_file)s"'

asciidoc:
    examples: [asciidoc]
    class: SubprocessExtToFormatFilter
    help: Runs asciidoc command.
    tags: [asciidoc, html]
    output: True
    version-command: asciidoc --version
    executable: asciidoc
    input-extensions: [.*]
    output-extensions: [.html, .xml, .tex]
    format-specifier: '-b '
    ext-to-format:
        .html: html5
        .xml: docbook45
        .tex: latex
    command-string: '%(prog)s %(format)s %(args)s -o %(output_file)s %(script_file)s'

bw|bwconv:
    class: SubprocessFilter
    executable: gs
    help: Converts color pdf to black and white.
    tags: [pdf, gs]
    input-extensions: [.pdf]
    output-extensions: [.pdf]
    command-string: '%(prog)s -dSAFER -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sColorConversionStrategy=Gray -dProcessColorModel=/DeviceGray -sOutputFile=%(output_file)s %(script_file)s'

dot|graphviz:
    class: SubprocessExtToFormatFilter
    help: Renders .dot files to either PNG or PDF images.
    tags: [dot, image, pdf]
    input-extensions: [.dot, .nto]
    output-extensions: [.png, .pdf]
    executable: dot
    version-command: dot -V
    format-specifier: '-T'
    ext-to-format:
           .png: png
           .pdf: pdf
    command-string: '%(prog)s %(format)s %(args)s -o"%(output_file)s" "%(script_file)s"'
    output: True

pdf2jpg:
    class: dexy.filters.sub:Pdf2ImgSubprocessFilter
    tags: [image, pdf, gs]
    help: Converts a PDF file to a jpg image using ghostscript.
    output-extensions: [.jpg]

html2pdf|wkhtmltopdf:
    class: SubprocessFilter
    executable: wkhtmltopdf
    tags: [deprecated, pdf]
    version-command: wkhtmltopdf --version
    input-extensions: [.html, .txt]
    output-extensions: [.pdf]
    help: >
           Deprecated, use casper.js instead.

           Renders HTML to PDF using wkhtmltopdf. If the HTML relies on assets
           such as CSS or image files, these should be specified as inputs.

           If you have an older version of wkhtmltopdf, and are running on a
           server, you may get XServer errors. You can install xvfb and run
           Dexy as `xvfb-run dexy`. Or upgrade to the most recent wkhtmltopdf
           which only needs X11 client libs.

ps2pdf|pstopdf:
    class: SubprocessFilter
    help: Converts a postscript file to PDF format.
    tags: [pdf]
    executable: ps2pdf
    input-extensions: [.ps, .txt]
    output-extensions: [.pdf]

ragel|rlrb|ragelruby:
    class: SubprocessFormatFlagFilter
    help: Generates ruby source code from a ragel file.
    tags: [ragel, parser, ruby]
    executable: ragel
    version-command: ragel --version
    input-extensions: [.rl]
    output-extensions: [.rb, .c, .java] # TODO add other formats
    ext-to-format:
           .rb : -R
           .java : -J
           .c : -C
    command-string: '%(prog)s %(format)s %(args)s "%(script_file)s" -o "%(output_file)s"'

rlrbd|ragelrubydot:
    class: SubprocessFilter
    help: Generates state chart in .dot format of ragel state machine for ruby.
    tags: [ragel, parser, dot, ruby]
    executable: ragel
    version-command: ragel --version
    input-extensions: [.rl]
    output-extensions: [.dot]
    command-string: '%(prog)s %(args)s -R -V "%(script_file)s" -o "%(output_file)s"'

rageldot:
    class: SubprocessFilter
    help: Generates state chart in .dot format of ragel state machine.
    tags: [ragel, parser, dot]
    executable: ragel
    version-command: ragel --version
    input-extensions: [.rl]
    output-extensions: [.dot]
    command-string: '%(prog)s %(args)s -V "%(script_file)s" -o "%(output_file)s"'

rintbatch:
    class: SubprocessFilter
    help: Runs R files in batch mode, returning an R console transcript.
    tags: [rstats, stats, code, repl]
    executable: R CMD BATCH --quiet --no-timing
    version-command : R --version
    input-extensions : ['.txt', '.r', '.R']
    output-extensions : [".Rout", '.txt']

rout|routbatch:
    class: SubprocessFilter
    tags: [rstats, stats, code]
    help: Runs R files in batch mode, returning just the output.
    executable: 'R CMD BATCH --vanilla --quiet --slave --no-timing'
    version-command: R --version
    input-extensions: ['.R', '.r', '.txt']
    output-extensions: [.txt]

htlatex:
    class: SubprocessFilter
    help: Generates HTML from Latex source using htlatex
    tags: [latex, html]
    input-extensions: [.tex, .txt]
    output-extensions: [.html]
    executable: htlatex
    add-new-files: [".html", ".png", ".css"]
    latexargs: ["Arguments to be passed to the latex command.", '']
    tex4htargs: ["Arguments to be passed to tex4ht", '']
    t4htargs: ["Arguments to be passed to t4ht", '']
    command-string: '%(prog)s %(script_file)s "%(args)s" "%(tex4htargs)s" "%(t4htargs)s" "%(latexargs)s"'

strings:
    class: SubprocessStdoutFilter
    tags: [utils]
    help: Clean non-printing characters from text using the 'strings' tool.
    executable: strings

regetron:
    class: SubprocessInputFileFilter
    tags: [regex]
    help: Filter which loads .regex file into regetron and runs any input text against it.
    executable: regetron
    input-extensions: [.regex]
    output-extensions: [.txt]

py|pyout:
    class: SubprocessStdoutFilter
    help: Runs Python code and returns stdout.
    tags: [python, code]
    executable: python
    input-extensions: [.py, .txt]
    output-extensions: [.txt]
    version-command: python --version

sh:
    class: SubprocessStdoutFilter
    help: Runs bash scripts using 'sh' and returns stdout.
    examples: [bash]
    tags: [shell, code]
    executable: 'sh -e'
    input-extensions: [".sh", ".bash", ".txt", ""]
    output-extensions: [".txt"]

bash:
    class: SubprocessStdoutFilter
    help: Runs bash scripts using 'bash' and returns stdout.
    examples: [bash]
    tags: [shell, code]
    executable: 'bash -e'
    input-extensions: [".sh", ".bash", ".txt", ""]
    output-extensions: [".txt"]
    version-command: 'bash --version'

rb:
    class: SubprocessStdoutFilter
    help: Runs ruby scripts and return stdout.
    executable: ruby
    tags: [ruby, code]
    version-command: ruby --version
    input-extensions: [.txt, .rb]
    output-extensions: [.rb]

irbout:
    class: SubprocessStdoutFilter
    help: Runs ruby scripts in irb.
    tags: [ruby, code, repl]
    check-return-code: False
    executable: 'irb --simple-prompt --noreadline'
    input-extensions: [".txt", ".rb"]
    output-extensions: [".rbcon"]
    version-command: 'irb --version'


sloc|sloccount:
    class: SubprocessStdoutFilter
    help: Runs code through sloccount.
    tags: [info]
    executable: 'sloccount'
    version-command: 'sloccount --version'
    input-extensions: [".*"]
    output-extensions: [".txt"]

wc:
    class: SubprocessStdoutFilter
    help: Runs input through wc command line tool.
    tags: [info]
    executable: wc
    output-extensions: [".txt"]

js|rhino:
    class: SubprocessStdoutFilter
    tags: [js, code]
    help: Runs code through rhino js interpreter.
    executable: "rhino -f"
    input-extensions: [".js", ".txt"]
    output-extensions: [".txt"]

lua:
    class: SubprocessStdoutFilter
    help: Runs code through lua interpreter.
    tags: [lua, code]
    executable: 'lua'
    version-command: 'lua -v'
    input-extensions: ['.lua', '.txt']
    output-extensions: ['.txt']

wiki2beamer:
    class: SubprocessStdoutFilter
    help: Converts wiki content to beamer.
    tags: [latex]
    executable: wiki2beamer
    input-extensions: [".wiki", ".txt"]
    output-extensions: [".tex"]
    version-command: "wiki2beamer --version"

escript:
    class: SubprocessStdoutFilter
    tags: [code, erlang]
    help: Runs Erlang scripts using the escript command.
    executable: escript
    input-extensions: [".erl"]
    output-extensions: [".txt"]

clang:
    class: SubprocessCompileFilter
    help: Compile code using clang and run.
    tags: [code, c, compiled]
    executable: "clang"
    input-extensions: [".c"]
    output-extensions: [".txt"]
    version-command: "clang --version"

clanginput:
    class: SubprocessCompileInputFilter
    help: compile code using clang and run with input.
    tags: [code, c, compiled, input]
    executable: "clang"
    input-extensions: [".c"]
    output-extensions: [".txt"]
    version-command: "clang --version"

c|gcc:
    class: SubprocessCompileFilter
    help: Compile code using gcc and run.
    tags: [code, c, compiled]
    executable: "gcc"
    input-extensions: [".c"]
    output-extensions: [".txt"]
    version-command: "gcc --version"

cfussy:
    class: SubprocessCompileFilter
    tags: [code, c, compiled]
    help: Compile code using gcc and run, raising an error if compiled code returns nonzero exit.
    executable: "gcc"
    input-extensions: [".c"]
    output-extensions: [".txt"]
    version-command: "gcc --version"
    check-return-code: true

cinput:
    class: SubprocessCompileInputFilter
    help: Compile code using gcc and run with input.
    tags: [code, input, c, compiled]
    executable: "gcc"
    input-extensions: [".c"]
    output-extensions: [".txt"]
    version-command: "gcc --version"

cpp:
    class: SubprocessCompileFilter
    tags: [code, cpp, compiled]
    help: Compile c++ code using cpp and run.
    executable: "c++"
    input-extensions: [".cpp"]
    output-extensions: [".txt"]
    version-command: "c++ --version"

cppinput:
    class: SubprocessCompileInputFilter
    tags: [code, input, cpp, compiled]
    help: Compile c++ code using cpp and run with input.
    executable: "c++"
    input-extensions: [".cpp"]
    output-extensions: [".txt"]
    version-command: "c++ --version"

# TODO handle EOF errors if people have 'quit' in their script
matlabint:
    class: PexpectReplFilter
    examples: ['matlab']
    help: Runs matlab in REPL.
    tags: [code, repl, stats, matlab]
    initial-timeout: 30
    executable: 'matlab -nodesktop -nosplash -nodisplay'
    input-extensions: ['.m', '.txt']
    output-extensions: ['.mout']
    line-ending: "\r\n"
    prompt: ">>"
    trim-prompt: ">>"

jsint|rhinoint:
    class: PexpectReplFilter
    tags: [js, repl, code]
    help: Runs rhino JavaScript interpeter.
    executable: "rhino"
    input-extensions: [".js", ".txt"]
    output-extensions: [".jscon"]
    prompts: ['js>', '  >']
    trim-prompt: "js>"
    initial-timeout: 60

irb|rbrepl:
    class: PexpectReplFilter
    help: Runs ruby code in irb.
    tags: [ruby, repl, code]
    executable: irb --simple-prompt
    check-return-code: False
    initial-prompt: "^>>"
    input-extensions: [".txt", ".rb"]
    output-extensions: [".rbcon"]
    prompts: [">>", "?>"]
    trim-prompt: '>>'
    version-command: 'irb --version'

kshint:
    class: PexpectReplFilter
    help: Runs ksh. Use to run bash scripts.
    tags: [code, repl, shell]
    executable: ksh -i
    input-extensions: [.txt, .sh]
    output-extensions: [.sh-session]
    initial-prompt: "^\\s*\\d*(#|\\$)\\s+"
    prompt-regex: "\\d*(#|\\$)"
    trim-prompt: "\\d*(\\$|#)"
    ps1: "\\$ "

phpint:
    class: PexpectReplFilter
    help: Runs PHP in interpeter mode.
    tags: [code, repl, php]
    check-return-code: false
    executable: "php -a"
    input-extensions: [".php", ".txt"]
    output-extensions: [".txt"]
    prompts: ['php > ']
    trim-prompt: "php > "

shint|bashint:
    class: PexpectReplFilter
    tags: [code, repl, shell]
    help: Runs bash. use to run bash scripts.
    examples: [bash]
    executable: bash --norc -i
    input-extensions: [.txt, .sh]
    output-extensions: [.sh-session]
    prompt-regex: "\\d*[#$]"
    initial-prompt: "\\d*[#$]"
    trim-prompt: "\\d*[#$]"
    ps1: "\\$ "

r|rint:
    class: PexpectReplFilter
    help: Runs R in REPL.
    check-return-code: False
    tags: [rstats, repl, code, stats]
    executable: "R --quiet --vanilla"
    input-extensions: ['.txt', '.R', '.r']
    output-extensions: ['.Rout']
    prompt-regex: "(\x1b[^m]*m)?(>|\\+)\\s*"
    initial-prompt: "(\x1b[^>])?>\\s*"
    trim-prompt: ">"
    strip-regex: "(\x1b[^h]+h)" # strip weird initial prompt on osx
    version-command: "R --version"
    save-vars-to-json-cmd: |
        if ("rjson" %%in%% installed.packages()) {
            library(rjson)
            dexy__json_file <- file("%s", "w")
            writeLines(toJSON(as.list(environment())), dexy__json_file)
            close(dexy__json_file)
        } else {
           cat("Can't automatically save environment to JSON since rjson package not installed.")
        }

# TODO ensure phantom.exit() is called in script?
phantomjs:
    class: SubprocessStdoutFilter
    help: Runs scripts using phantom js.
    tags: [headless, screenshots, html, js]
    executable: phantomjs
    input-extensions: [.js, .txt]
    output-extensions: [.txt]
    version-command: phantomjs --version

casperjs:
    class: SubprocessStdoutFilter
    help: Runs scripts using casper js. Saves cookies.
    tags: [headless, screenshots, html, js]
    add-new-files: True
    input-extensions: [.js, .txt]
    output-extensions: [.txt]
    executable: casperjs
    version-command: casperjs --version
    command-string: "%(prog)s --cookies-file=cookies.txt %(args)s %(script_file)s %(scriptargs)s"

latexdvi|dvilatex:
    class: dexy.filters.latex:LatexFilter
    help: Run Latex outputting a .dvi file.
    tags: [latex]
    output-extensions: [.dvi]
    executable: latex

rst2html:
    class: SubprocessFilter
    help: Convert rst to HTML
    tags: [reStructuredText]
    executable: rst2html.py
    version-command: rst2html.py --version
    input-extensions: [.rst, .txt]
    output-extensions: [.html]

rst2latex:
    class: SubprocessFilter
    help: Runs rst2latex command (docutils).
    tags: [reStructuredText, latex]
    executable: rst2latex.py
    input-extensions: [".rst", ".txt"]
    output-extensions: [".tex"]
    version-command: 'rst2latex.py --version'

rst2xml:
    class: SubprocessFilter
    help: Runs rst2xml command (docutils).
    executable: rst2xml.py
    version-command: 'rst2xml.py --version'
    input-extensions: [".rst", ".txt"]
    output-extensions: [".tex"]

rst2beamer:
    class: SubprocessFilter
    help: Runs rst2beamer command (docutils).
    tags: [reStructuredText]
    executable: rst2beamer
    input-extensions: [".rst", ".txt"]
    output-extensions: [".tex"]
    version-command: "rst2beamer --version"

rst2man:
    class: SubprocessFilter
    help: Runs rst2man command (docutils).
    tags: [reStructuredText]
    executable: rst2man.py
    input-extensions: [".rst", ".txt"]
    output-extensions: [".man"]
    version-command: "rst2man.py --version"

cpickle:
    class: PreserveDataClassFilter
    help: Forces previous filter to output .cpickle extension.
    tags: [file-extensions]
    input-extensions: [.cpickle]
    output-extensions: [.cpickle]

pickle:
    class: PreserveDataClassFilter
    help: Forces previous filter to output .pickle extension.
    tags: [file-extensions]
    input-extensions : [.pickle]
    output-extensions : [.pickle]

h|forcehtml:
    class: PreserveDataClassFilter
    help: Forces previous filter to output .html extension.
    tags: [file-extensions]
    input-extensions : [.html]
    output-extensions : [.html]

j|forcejson:
    class: PreserveDataClassFilter
    help: Forces previous filter to output .json extension.
    tags: [file-extensions]
    input-extensions : [.json]
    output-extensions : [.json]

svg|forcesvg:
    class: PreserveDataClassFilter
    help: Forces previous filter to output .svg extension.
    tags: [file-extensions]
    input-extensions : [.svg]
    output-extensions : [.svg]

x|forcexml:
    class: PreserveDataClassFilter
    help: Forces previous filter to output .xml extension.
    tags: [file-extensions]
    input-extensions : [.xml]
    output-extensions : [.xml]

l|forcelatex:
    class: PreserveDataClassFilter
    help: Forces previous filter to output .tex extension.
    tags: [file-extensions]
    input-extensions : [.tex]
    output-extensions : [.tex]

t|forcetext:
    class: PreserveDataClassFilter
    tags: [file-extensions]
    help: Forces previous filter to output .txt extension.
    input-extensions : [.txt]
    output-extensions : [.txt]

forcer:
    class: PreserveDataClassFilter
    tags: [file-extensions]
    help: Forces previous filter to output .R extension.
    input-extensions : [.R]
    output-extensions : [.R]

p|forcepdf:
    class: PreserveDataClassFilter
    tags: [file-extensions]
    help: Forces previous filter to output .pdf extension.
    input-extensions : [.pdf]
    output-extensions : [.pdf]

jn|forcejpg:
    class: PreserveDataClassFilter
    tags: [file-extensions]
    help: Forces previous filter to output .jpg extension.
    input-extensions : [.jpg]
    output-extensions : [.jpg]

pn|forcepng:
    class: PreserveDataClassFilter
    tags: [file-extensions]
    help: Forces previous filter to output .png extension.
    input-extensions : [.png]
    output-extensions : [.png]

gn|forcegif:
    class: PreserveDataClassFilter
    tags: [file-extensions]
    help: Forces previous filter to output .gif extension.
    input-extensions : [.gif]
    output-extensions : [.gif]

bn|forcebmp:
    class: PreserveDataClassFilter
    tags: [file-extensions]
    help: Forces previous filter to output .bmp extension.
    input-extensions : [.bmp]
    output-extensions : [.bmp]

cb:
    class: PreserveDataClassFilter
    tags: [file-extensions]
    help: Changes file extension to .sh
    input-extensions : ['.*', '*']
    output-extensions : [.sh]

ct:
    class: PreserveDataClassFilter
    tags: [file-extensions]
    help: Changes file extension to .txt
    input-extensions : [.*]
    output-extensions : [.txt]

ch:
    class: PreserveDataClassFilter
    tags: [file-extensions]
    help: Changes file extension to .html
    input-extensions : [.*]
    output-extensions : [.html]

cj:
    class: PreserveDataClassFilter
    tags: [file-extensions]
    help: Changes file extension to .json
    input-extensions : [.*]
    output-extensions : [.json]
